version: '3.8'

services:
  phishx:
    build: .
    container_name: phishx_app
    ports:
      - "5000:5000"
      - "5001-5010:5001-5010"  # Additional ports for multi-campaign deployment
    environment:
      - SESSION_SECRET=${SESSION_SECRET:-phishx-secret-key-change-in-production}
      - DATABASE_URL=${DATABASE_URL:-sqlite:///data/phishx.db}
      - TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
      - TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}
      - SLACK_WEBHOOK_URL=${SLACK_WEBHOOK_URL}
      - DISCORD_WEBHOOK_URL=${DISCORD_WEBHOOK_URL}
      - ENCRYPTION_KEY=${ENCRYPTION_KEY:-default-encryption-key}
      - ENABLE_AI_EVASION=${ENABLE_AI_EVASION:-false}
      - ENABLE_QUANTUM_RESISTANT=${ENABLE_QUANTUM_RESISTANT:-false}
      - DOCKER_ENABLED=true
    volumes:
      - phishx_data:/app/data
      - phishx_logs:/app/logs
      - phishx_uploads:/app/uploads
      - phishx_templates:/app/templates/phishing
    networks:
      - phishx_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Optional: PostgreSQL database for production
  postgres:
    image: postgres:15-alpine
    container_name: phishx_postgres
    environment:
      - POSTGRES_DB=${PGDATABASE:-phishx}
      - POSTGRES_USER=${PGUSER:-phishx}
      - POSTGRES_PASSWORD=${PGPASSWORD:-phishx_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - phishx_network
    restart: unless-stopped
    profiles:
      - postgres

  # Optional: Redis for session management and caching
  redis:
    image: redis:7-alpine
    container_name: phishx_redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-phishx_redis_password}
    volumes:
      - redis_data:/data
    networks:
      - phishx_network
    restart: unless-stopped
    profiles:
      - redis

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: phishx_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - phishx
    networks:
      - phishx_network
    restart: unless-stopped
    profiles:
      - nginx

  # Optional: Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: phishx_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - phishx_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Optional: Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: phishx_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - phishx_network
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  phishx_data:
    driver: local
  phishx_logs:
    driver: local
  phishx_uploads:
    driver: local
  phishx_templates:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  phishx_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
